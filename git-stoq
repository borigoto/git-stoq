#!/bin/bash
#
# git-stoq: a simple script to simplify development of stoq using git
#
# Installation
# $ wget http://git.async.com.br/cgi-bin/cgit/git-stoq/plain/git-stoq -O ~/bin/git-stoq
# $ chmod +x ~/bin/git-stoq
#
# Development setup:
# $ git-stoq --setup
#
# Creating a new branch:
# $ git-stoq --init master
#
# Entering development mode for the default branch:
# $ git-stoq
#
# Or if you choose to use repo, setup de development and, instead of
# initiating a new branch, just run:
# $ git-stoq --repo
#
# That will initialize repo if it wasn't set before and initiate a
# stoq shell just like the other approach. This is the preferred
# way for working with git, while the other is a just to make it easy
# for people coming from bzr-stoq to use git-stoq.
#

PROGNAME="git-stoq"
MANIFEST_URL="http://gerrit.async.com.br/stoq-manifest"
CONFIG=$HOME/.stoq-dev.git
BIN_PATH=$HOME/bin
REPO_PATH=$BIN_PATH/repo
PROJECTS="kiwi stoq stoqdrivers"

usage () {
    echo "Usage: $PROGNAME [options]

  Available options:
    -i,--init         Create a new set of checkouts
    -l,--list         List branches
    -r,--repo         Initiate stoq shell for use with repo
    -s,--setup        Configure development environment
    -u,--update       Update repository(ies)
    --help            Show this message"
  exit
}

init () {
  CHECKOUT=$(cat $CONFIG)
  TREE=$1

  CHECKOUT_TREE=$CHECKOUT/$TREE
  for PROJECT in $PROJECTS; do
    git clone http://gerrit.async.com.br/$PROJECT $CHECKOUT_TREE/$PROJECT
    scp -p -P 29418 gerrit.async.com.br:hooks/commit-msg \
        $CHECKOUT_TREE/$PROJECT/.git/hooks
    _configure $CHECKOUT_TREE $PROJECT
  done

  exit
}

setup () {
  read -p "Checkout [~/devel]> " CHECKOUT
  if [ -z "$CHECKOUT" ]; then
    CHECKOUT=~/devel
  fi

  echo $CHECKOUT > $CONFIG
  if [ ! -d "$CHECKOUT" ]; then
     mkdir -p $CHECKOUT
  fi

  if [ -z "$(git config --get user.email)" ]; then
      read -p "Git email address> " email
      git config --global user.email $email
  fi
  exit
}

update () {
  CHECKOUT=$(cat $CONFIG)
  TREE=$1
  cd $CHECKOUT/$TREE/kiwi && git pull
  cd $CHECKOUT/$TREE/stoqdrivers && git pull
  cd $CHECKOUT/$TREE/stoq && git pull
  exit
}

list() {
  CHECKOUT=$(cat $CONFIG)
  ls $CHECKOUT|sort
  exit
}

repo () {
  if [ ! -d "$BIN_PATH" ]; then
    mkdir -p $BIN_PATH
  fi
  if [ ! -f "$REPO_PATH" ]; then
    echo "No repo found... Download it to $REPO_PATH"
    # Instructions copied from: http://source.android.com/source/downloading.html
    curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > $REPO_PATH
    chmod a+x $REPO_PATH
  fi

  TREE=""
  CHECKOUT=$(cat $CONFIG)
  if [ ! -d "$CHECKOUT/.repo" ]; then
    echo "Repo configuration did not exist. Initiating it..."
    cd $CHECKOUT
    # Using REPO_PATH to avoid conflict with the internal repo name
    $REPO_PATH init -u $MANIFEST_URL
    $REPO_PATH sync
    for PROJECT in $PROJECTS; do
      _configure $CHECKOUT $PROJECT
    done
  fi

  _shell $CHECKOUT $TREE
}

develop () {
  CHECKOUT=$(cat $CONFIG)
  TREE=$1
  if [ -z "$TREE" ]; then
      if [ "$(ls $CHECKOUT|wc -l)" = "1" ]; then
          TREE=$(ls $CHECKOUT)
      else
          echo "Select a tree:"
          ls $CHECKOUT|sort
          exit
      fi
  fi

  echo "Entering tree: $TREE"
  _shell $CHECKOUT $TREE
}

_configure () {
  CHECKOUT=$1
  PROJECT=$2

  cd $CHECKOUT/$PROJECT
  git config remote.review.url ssh+git://gerrit.async.com.br:29418/$PROJECT
  git config remote.review.push HEAD:refs/for/master
}

_shell () {
  TREE=$2
  if [ -z "$TREE" ]; then
    # When using repo, put 'stoq' on TREE for PS1
    TREE="stoq"
  fi

  export CHECKOUT="$1/$2"
  SCRIPT=$(tempfile --suffix=.sh)
  trap "rm $SCRIPT" EXIT
  cat <<EOF > $SCRIPT
test -f ~/.bashrc && source ~/.bashrc
source /etc/bash_completion
export PS1="[$TREE] \\u@\\h\\\$(__git_ps1 \"(%s)\") :\\w\$ "
export PATH=$CHECKOUT/stoq/bin:\$PATH
export PYTHONPATH=$CHECKOUT/stoq:$CHECKOUT/kiwi:$CHECKOUT/stoqdrivers:\${PYTHONPATH}
export STOQLIB_TEST_QUICK=1
export STOQ_DISABLE_CRASHREPORT=1

for dir in kiwi stoqdrivers stoq; do
    cd \$CHECKOUT/\$dir
    kiwi-i18n -c > /dev/null 2>&1
done
# cd to the working tree, so we are ready to work!
cd \$CHECKOUT
EOF
  bash --rcfile $SCRIPT
  exit
}

TEMP=`getopt -o hi:lrsu --long help,init:,list,repo,setup,update \
             -n $PROGNAME -- "$@"`

if [ $? != 0 ] ; then exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true; do
  case "$1" in
    -h | --help ) usage; shift ;;
    -i | --init ) init "$2"; shift ;;
    -l | --list ) list; shift ;;
    -r | --repo ) repo; shift; break ;;
    -s | --setup ) setup; shift ;;
    -u | --update ) update; shift 2 ;;
    -- ) develop "$2"; shift; break ;;
    * ) echo "*"; break ;;
  esac
done
