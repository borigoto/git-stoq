#!/bin/bash
#
# git-stoq: a simple script to simplify development of stoq using git
#
# Installation
# $ wget https://raw.github.com/stoq/git-stoq/master/git-stoq -O ~/bin/git-stoq
# $ chmod +x ~/bin/git-stoq
#
# Development setup:
# $ git-stoq --setup
#
# Creating a new branch:
# $ git-stoq --init master
#
# Entering development mode for the default branch:
# $ git-stoq
#
# Or if you choose to use repo, setup the development and, instead of
# initiating a new branch, just run:
# $ git-stoq --repo
#
# That will initialize repo if it wasn't set before and initiate a
# stoq shell just like the other approach. This is the preferred
# way for working with git, while the other is a just to make it easy
# for people coming from bzr-stoq to use git-stoq.
#

PROGNAME="git-stoq"
MANIFEST_URL="http://gerrit.async.com.br/stoq-manifest"
BIN_PATH=$HOME/bin
REPO_PATH=$BIN_PATH/repo
PROJECTS="kiwi stoq stoqdrivers"

usage () {
    echo "Usage: $PROGNAME [options]

  Available options:
    -i,--init         Create a new set of checkouts
    -l,--list         List branches
    -r,--repo         Initiate stoq shell for use with repo
    -s,--setup        Configure development environment
    -u,--update       Update repository(ies)
    --help            Show this message"
  exit
}

init () {
  CHECKOUT=$(git config stoq.checkout)
  TREE=$1

  CHECKOUT_TREE=$CHECKOUT/$TREE
  for PROJECT in $PROJECTS; do
    git clone http://gerrit.async.com.br/$PROJECT $CHECKOUT_TREE/$PROJECT
    scp -p -P 29418 gerrit.async.com.br:hooks/commit-msg \
        $CHECKOUT_TREE/$PROJECT/.git/hooks
    _configure $CHECKOUT_TREE $PROJECT
  done

  exit
}

setup () {
  read -p "Checkout [~/devel]> " CHECKOUT
  if [ -z "$CHECKOUT" ]; then
    CHECKOUT=~/devel
  fi
  eval CHECKOUT=$CHECKOUT

  git config --global stoq.checkout $CHECKOUT

  if [ ! -d "$CHECKOUT" ]; then
     mkdir -p $CHECKOUT
  fi

  if [ -z "$(git config --get user.email)" ]; then
      read -p "Git email address> " email
      git config --global user.email $email
  fi
  exit
}

update () {
  CHECKOUT=$(git config stoq.checkout)
  TREE=$1
  cd $CHECKOUT/$TREE/kiwi && git pull
  cd $CHECKOUT/$TREE/stoqdrivers && git pull
  cd $CHECKOUT/$TREE/stoq && git pull
  exit
}

list() {
  CHECKOUT=$(git config stoq.checkout)
  ls $CHECKOUT|sort
  exit
}

repo () {
  if [ ! -d "$BIN_PATH" ]; then
    mkdir -p $BIN_PATH
  fi
  if [ ! -f "$REPO_PATH" ]; then
    echo "No repo found... Download it to $REPO_PATH"
    # Instructions copied from: http://source.android.com/source/downloading.html
    wget https://dl-ssl.google.com/dl/googlesource/git-repo/repo -O $REPO_PATH
    chmod a+x $REPO_PATH
  fi

  TREE=""
  CHECKOUT=$(git config stoq.checkout)
  if [ ! -d "$CHECKOUT/.repo" ]; then
    echo "Repo configuration did not exist. Initiating it..."
    cd $CHECKOUT
    # Using REPO_PATH to avoid conflict with the internal repo name
    $REPO_PATH init -u $MANIFEST_URL
    $REPO_PATH sync
    for PROJECT in $PROJECTS; do
      _configure $CHECKOUT $PROJECT
    done
  fi

  _shell $CHECKOUT $TREE
}

develop () {
  CHECKOUT=$(git config stoq.checkout)
  TREE=$1
  if [ -z "$TREE" ]; then
      if [ "$(ls $CHECKOUT|wc -l)" = "1" ]; then
          TREE=$(ls $CHECKOUT)
      else
          echo "Select a tree:"
          ls $CHECKOUT|sort
          exit
      fi
  fi

  echo "Entering tree: $TREE"
  _shell $CHECKOUT $TREE
}

_configure () {
  CHECKOUT=$1
  PROJECT=$2

  cd $CHECKOUT/$PROJECT
  git config remote.review.url ssh+git://gerrit.async.com.br:29418/$PROJECT
  git config remote.review.push HEAD:refs/for/master
}

_shell () {
  TREE=$2
  if [ -z "$TREE" ]; then
    # When using repo, put 'stoq' on TREE for PS1
    TREE="stoq"
  fi

  export CHECKOUT="$1/$2"

  # We can't rely on PROJECTS here since there can be others on the checkout
  for PROJECT in `ls $CHECKOUT | sort`; do
    PROJECT_PATH=$CHECKOUT/$PROJECT
    # Make sure we add new hooks every time the shell inits
    if [ -d "$PROJECT_PATH/tools/git-hooks/" ]; then
      cp -au $PROJECT_PATH/tools/git-hooks/* \
             $PROJECT_PATH/.git/hooks/
    fi

    PO_FILE="$PROJECT_PATH/po/pt_BR.po"
    MO_DIR="$PROJECT_PATH/locale/pt_BR/LC_MESSAGES"
    MO_FILE="$MO_DIR/stoq.mo"
    # Compile translations for pt_BR if they exist and are newer than existing
    if [ -f "$PO_FILE" ] && [ "$PO_FILE" -nt "$MO_FILE" ]; then
      mkdir -p $MO_DIR
      msgfmt $PO_FILE -o $MO_FILE
    fi
  done

  SCRIPT=$(tempfile --suffix=.sh)
  trap "rm $SCRIPT" EXIT
  cat <<EOF > $SCRIPT
# This list of environment variables are placed before the source lines,
# so that they can be customized in the users ~/.bashrc
export STOQ_BRANCH=$TREE
export STOQLIB_TEST_QUICK=1
export STOQ_DISABLE_CRASHREPORT=1

test -f ~/.bashrc && source ~/.bashrc
test -f /etc/bash_completion && source /etc/bash_completion

# This is updated after the users environment variables has been loaded
export PATH=$CHECKOUT/stoq/bin:\$PATH
export PYTHONPATH=$CHECKOUT/stoq:$CHECKOUT/kiwi:$CHECKOUT/stoqdrivers:\${PYTHONPATH}

# cd to the working tree, so we are ready to work!
cd \$CHECKOUT
EOF
  bash --rcfile $SCRIPT
  exit
}

TEMP=`getopt -o hi:lrsu --long help,init:,list,repo,setup,update \
             -n $PROGNAME -- "$@"`

if [ $? != 0 ] ; then exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

OLD_CONFIG=$HOME/.stoq-dev.git
if [ -f $OLD_CONFIG ]; then
   git config --global stoq.checkout $(cat $OLD_CONFIG)
   rm $OLD_CONFIG
fi

while true; do
  case "$1" in
    -h | --help ) usage; shift ;;
    -i | --init ) init "$2"; shift ;;
    -l | --list ) list; shift ;;
    -r | --repo ) repo; shift; break ;;
    -s | --setup ) setup; shift ;;
    -u | --update ) update; shift 2 ;;
    -- ) develop "$2"; shift; break ;;
    * ) echo "*"; break ;;
  esac
done
